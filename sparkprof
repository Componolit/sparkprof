#!/usr/bin/env python3

import re
import subprocess
import sys
from typing import Dict, Optional, Tuple

COLOR_RED = "\033[0;31m"
COLOR_YELLOW = "\033[0;33m"
COLOR_RED_BOLD = "\033[1;31m"
COLOR_NONE = "\033[0m"


class Results:
    def __init__(
        self, proof_time: float = 0, max_time: float = 0, max_steps: int = 0, unproven: int = 0,
    ) -> None:
        self.proof_time = proof_time
        self.max_time = max_time
        self.max_steps = max_steps
        self.unproven = unproven


def main() -> None:
    args = [
        a
        for a in sys.argv[1:]
        if not a.startswith("--steps-warn=") and not a.startswith("--steps-error=")
    ] + ["--report=statistics", "--no-counterexample"]

    steps_warn = next((int(x[13:]) for x in sys.argv[1:] if x.startswith("--steps-warn=")), None)
    steps_error = next((int(x[14:]) for x in sys.argv[1:] if x.startswith("--steps-error=")), None)

    units: Dict[str, Results] = {}

    gp = subprocess.Popen(["gnatprove"] + args, stdout=subprocess.PIPE, universal_newlines=True)
    for line in gp.stdout:
        m = re.match(
            r"^(?P<intro>(?P<unit>\S+)\.ad[bs]:\d+:\d+:) (?P<level>[a-z]+): "
            r"(?P<txt>.+?)(?P<instantiation>, in instantiation at (?P<instance>\S+)\.ad[bs]:\d+)?$",
            line,
        )
        if m:
            instantiation = m.group("instantiation") if m.group("instantiation") else ""
            unit = (
                f"{m.group('unit')} ({m.group('instance')})" if instantiation else m.group("unit")
            )
            if unit not in units:
                units[unit] = Results()

            gp_level = m.group("level")

            if gp_level == "info":
                n = re.match(
                    r"^(?P<contract>.+) proved \("
                    r"(?P<p1>\w+: [^;]+)"
                    r"(?:; (?P<p2>\w+: [^;]+))?"
                    r"(?:; (?P<p3>\w+: [^;]+))?"
                    r"\)"
                    r"(?P<rest>.*)$",
                    m.group("txt"),
                )
                if n:
                    for statistics in [n.group("p1"), n.group("p2"), n.group("p3")]:
                        if not statistics:
                            continue

                        time, steps = process_prover_statistics(
                            statistics,
                            steps_warn,
                            steps_error,
                            m.group("intro"),
                            n.group("contract"),
                            n.group("rest"),
                            instantiation,
                        )

                        assert unit in units
                        u = units[unit]
                        u.proof_time = u.proof_time + float(time)
                        u.max_time = max(float(time), u.max_time)
                        u.max_steps = max(steps, u.max_steps)

            elif gp_level == "medium":
                assert unit in units
                u = units[unit]
                u.unproven = u.unproven + 1
                print(
                    f"{m.group(1)} {COLOR_RED_BOLD}{m.group(3)}: {m.group(4)}{instantiation}"
                    + COLOR_NONE,
                    flush=True,
                )

            else:
                print(line, end="", flush=True)

        else:
            print(line, end="", flush=True)

    print_results(units)

    sys.exit(gp.returncode)


# pylint: disable=too-many-arguments
def process_prover_statistics(
    statistics: str,
    steps_warn: Optional[int],
    steps_error: Optional[int],
    intro: str,
    contract: str,
    rest: str,
    instantiation: str,
) -> Tuple[float, int]:

    m = re.match(
        r"^(?P<prover>\w+): "
        r"(?P<vcs>\d+) VC in max (?P<time>\d+.\d) seconds and (?P<steps>\d+) steps?$",
        statistics,
    )
    assert m is not None
    time = float(m.group("time"))
    steps = int(m.group("steps"))
    level = None
    if steps_error and steps >= steps_error:
        level = COLOR_RED + "error"
    elif steps_warn and steps >= steps_warn:
        level = COLOR_YELLOW + "warning"

    if level:
        print(
            f"{intro} {level}: too many steps: {contract} proved ({m.group('prover')}: "
            f"{m.group('vcs')} VC in max {time:.1f} seconds and {steps} steps){rest}{instantiation}"
            + COLOR_NONE,
            flush=True,
        )

    return (time, steps)


def print_results(units: Dict[str, Results]) -> None:
    if units:
        max_name_length = max(len(u) for u in units)

        print("-" * (max_name_length + 34))
        print(
            "UNIT".ljust(max_name_length)
            + " MAX STEPS".ljust(13)
            + " MAX TIME".ljust(10)
            + " TOTAL TIME"
        )

        overall = "ALL"
        all_units = sorted(units.keys()) + [overall]
        units[overall] = Results(
            sum(r.proof_time for r in units.values()),
            max(r.max_time for r in units.values()),
            max(r.max_steps for r in units.values()),
            sum(r.unproven for r in units.values()),
        )

        for unit in all_units:
            print(unit.ljust(max_name_length), end="")
            print(f" {units[unit].max_steps:6d} steps", end="")
            print(f" {units[unit].max_time:7.1f} s", end="")
            print(f" {units[unit].proof_time:7.1f} s", end="")
            if units[unit].unproven:
                print(f" {COLOR_RED_BOLD}{units[unit].unproven:4d} VC unproven{COLOR_NONE}", end="")
            print()


if __name__ == "__main__":
    main()
