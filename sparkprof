#!/usr/bin/env python3

import re
import sys
import subprocess


COLOR_RED = "\033[0;31m"
COLOR_YELLOW = "\033[0;33m"
COLOR_RED_BOLD = "\033[1;31m"
COLOR_NONE = "\033[0m"


def main() -> None:
    args = [
        a
        for a in sys.argv[1:]
        if not a.startswith("--steps-warn=") and not a.startswith("--steps-error=")
    ] + ["--report=statistics"]

    steps_warn = next((int(x[13:]) for x in sys.argv[1:] if x.startswith("--steps-warn=")), None)
    steps_error = next((int(x[14:]) for x in sys.argv[1:] if x.startswith("--steps-error=")), None)

    units = set()
    proof_time = {}
    max_time = {}
    max_steps = {}
    unproven = {}

    gp = subprocess.Popen(["gnatprove"] + args, stdout=subprocess.PIPE, universal_newlines=True)
    for line in gp.stdout:
        m = re.match(r"^((.*)\.ad.:\d*:\d*:) ([a-z]*): (.*)$", line)
        if m:
            unit = m.group(2)
            units.add(unit)

            level = m.group(3)

            if level == "info":
                unit = m.group(2)
                n = re.match(
                    r"^(.*) proved \((.*): (.*) VC in max (\d.\d) seconds and (\d+) steps?\)(.*)$",
                    m.group(4),
                )
                if n:
                    vcs = int(n.group(3))
                    time = n.group(4)
                    steps = int(n.group(5))
                    emit = None
                    if steps_error and steps >= steps_error:
                        emit = COLOR_RED + "error"
                    elif steps_warn and steps >= steps_warn:
                        emit = COLOR_YELLOW + "warning"

                    if emit:
                        template = (
                            "{intro} {level}: too many steps: {type} proved ({prover}: {vcs} VC in "
                            + "max {time} seconds and {steps} steps){rest}"
                            + COLOR_NONE
                        )
                        print(
                            template.format(
                                intro=m.group(1),
                                level=emit,
                                type=n.group(1),
                                prover=n.group(2),
                                vcs=vcs,
                                time=time,
                                steps=steps,
                                rest=n.group(6),
                            ),
                            flush=True,
                        )

                    proof_time[unit] = (proof_time[unit] + float(time)) if unit in proof_time else float(time)
                    max_time[unit] = max(float(time), max_time[unit] if unit in max_time else 0)
                    max_steps[unit] = max(steps, max_steps[unit] if unit in max_steps else 0)

            elif level == "medium":
                unproven[unit] = (unproven[unit] + 1) if unit in unproven else 1
                print(
                    f"{m.group(1)} {COLOR_RED_BOLD}{m.group(3)}: {m.group(4)}{COLOR_NONE}", flush=True
                )

            else:
                print(line, end="", flush=True)

        else:
            print(line, end="", flush=True)

    if units:
        print("-" * 100)
        print("UNIT".ljust(40) + " MAX STEPS".ljust(13) + " MAX TIME".ljust(10) + " TOTAL TIME")

        total = "TOTAL"
        all_units = list(units) + [total]
        max_steps[total] = max(max_steps.values())
        max_time[total] = max(max_time.values())
        proof_time[total] = sum(proof_time.values())
        unproven[total] = sum(unproven.values())

        for unit in all_units:
            print(f"{unit:40s}", end="")
            if unit in max_steps:
                print(f" {max_steps[unit]:6d} steps", end="")
            if unit in max_time:
                print(f" {max_time[unit]:7.1f} s", end="")
            if unit in proof_time:
                print(f" {proof_time[unit]:7.1f} s", end="")
            if unit in unproven and unproven[unit] != 0:
                print(f" {COLOR_RED_BOLD}{unproven[unit]:4d} VC unproven{COLOR_NONE}", end="")
            print()

    sys.exit(gp.returncode)


if __name__ == '__main__':
    main()
